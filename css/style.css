@charset "UTF-8";
html {
  background-color: #ebeeef;
  color: #181a1b;
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 14px;
  line-height: 140%;
}

.Wrapper {
  margin: 40px auto;
  max-width: 1280px;
  width: 90%;
}

h1, h2, h3, h4 {
  margin: 0 0 16px 0;
}

h2 {
  font-size: 24px;
  font-weight: normal;
  line-height: 120%;
}

h3 {
  font-size: 20px;
  line-height: 120%;
}

h3:not(:first-child) {
  padding-top: 1em;
}

p {
  margin: 0 0 16px;
}

p:last-child {
  margin: 0;
}

a {
  background-image: linear-gradient(to top, rgba(0, 122, 191, 0.4) 1px, transparent 1px);
  color: #007abf;
  text-decoration: none;
}

a:focus,
a:hover {
  background-image: linear-gradient(to top, rgba(0, 103, 175, 0.8) 1px, transparent 1px);
  color: #0067af;
  text-decoration: none;
}

/**
 * Card
   ==========================================================================
   The Card component is a generic container component used to separate chunks
   of distinct and different content.

   Typically, cards are used to show information at a fairly high level (on a
   dashboard, for example), and they often link off to more detailed views of
   the displayed data.
*/
/**
 * Card layout
 *
 * 1. The bottom margin is just to add some space before the footer. Otherwise
 *    the gap is very small.
 */
.CardLayout {
  /* 1 */
  margin: 0 auto 64px;
}

/**
 * CardLayout--narrow can be used to constrain the width of Cards
 */
.CardLayout--narrow {
  max-width: 600px;
}

/**
 * The basic appearance of a Card
 *
 * This element is primarily a wrapper for the Card-segments.
 *
 * 1. Clearfix for floated elements inside cards
 * 2. Flex layout allows easy positioning and ordering of the child segments
 * 3. Cards are self-centering when they are not as wide as their container
 * 4. Limit the width of the card so that line lengths don't get out of hand and
 *    the content is not spread too thin. Cards tend to lose their structure if
 *    everything is on one line.
 */
.Card {
  border-radius: 2px;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);
  box-sizing: border-box;
  color: #181a1b;
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column;
  flex-wrap: nowrap;
  margin-bottom: 8px;
  overflow: hidden;
}

.Card--horizontalSegments {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
          flex-direction: row;
}

/**
 * The basic segments of a Card
 *
 * This element is used to wrap each section of the Card's content and to
 * provide spacing and dividing lines between those sections. Many Cards will
 * only have one segment, but it should almost always be present.
 */
.Card-segment {
  background-color: #fff;
  box-sizing: border-box;
  -webkit-box-flex: 1;
          flex: 1 1 auto;
}

.Card--horizontalSegments .Card-segment {
  flex-basis: 50%;
}

.Card--horizontalSegments .Card-segment--secondary {
  -webkit-box-flex: 0;
          flex: 0 1 40%;
}

/**
 * Removes the bottom dividing line if a segment is the last one
 */
.Card-segment:not(:last-child) {
  border-bottom: 1px solid #ebeeef;
}

.Card--horizontalSegments .Card-segment:not(:last-child) {
  border-bottom: none;
  border-right: 1px solid #ebeeef;
}

/**
 * Remove any bottom margin from the last child in a Card-segement to maintain
 * more even spacing around the content
 */
.Card-segment > *:last-child {
  margin-bottom: 0;
}

/**
 * A variant of the Card-segment with some default padding
 */
.Card-segment--padded {
  padding: 24px;
}

.Card-segment--padded--large {
  padding: 32px 40px;
}

/**
 * Card segment section headings
 */
.Card-segment .sectionHeading {
  color: #7b8a93;
  font-size: 11px;
  font-weight: 400;
  text-transform: uppercase;
}

/**
 * White Card-segment
 */
.Card-segment--white {
  background-color: #fff;
}

/**
 * Grey Card-segment
 */
.Card-segment--grey {
  background-color: #f8f9fa;
}

/**
 * Card links
 */
a.Card-segment:hover {
  color: #181a1b;
  cursor: pointer;
}

a.Card-segment--grey:hover {
  background-color: #f5f6f7;
}

a.Card-segment::after {
  background-image: image-url("talaria/components/icons/rightChevron.svg");
  background-position: 50% 50%;
  background-repeat: no-repeat;
  background-size: 20px;
  bottom: 0;
  content: "";
  position: absolute;
  right: 30px;
  top: 0;
  width: 80px;
}

a.Card-segment {
  position: relative;
}

a.Card-segment--expand::after {
  -webkit-transform: rotate(90deg);
          transform: rotate(90deg);
}

a.Card-segment--expand.Open::after {
  -webkit-transform: rotate(270deg);
          transform: rotate(270deg);
}

/**
 * A MediaObject consists of an image, usually on the left, alongside block of
 * related content.
 *
 * Examples:
 * - the bank name and logo displayed in the bank account sidebar
 */
.MediaObject {
  margin-bottom: 16px;
  align-content: flex-start;
  -webkit-box-align: start;
          align-items: flex-start;
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
          flex-flow: row nowrap;
  -webkit-box-pack: start;
          justify-content: flex-start;
}

/**
 * The image component of the MediaObject
 */
.MediaObject-image {
  -webkit-box-flex: 0;
          flex: 0 0 auto;
}

.MediaObject-image img {
  display: block;
}

/**
 * The content to the of the MediaObject - on the right of the image by default
 *
 * 1. Add a small amount of space between the image and the content
 */
.MediaObject-content {
  -webkit-box-flex: 1;
          flex: 1 1 auto;
  /* 1 */
  margin-left: 8px;
}

/**
 * Variant of the MediaObject with the image and the content vertically centered
 */
.MediaObject--verticallyCentered {
  -webkit-box-align: center;
          align-items: center;
}

.MediaObject-content > h1:last-child,
.MediaObject-content > h2:last-child,
.MediaObject-content > h3:last-child,
.MediaObject-content > h4:last-child,
.MediaObject-content > p:last-child {
  margin: 0;
}

/**
 * Max-width values shared across multiple views
 */
/* 16x40*/
/* 16x50*/
/* 16x60*/
/**
 * Shared drop shadow styling
 */
/*0.15*/
/*0.25*/
/**
 * Box shadows used for focus states in .Form
 */
/**
 * Default height .Form inputs and .Buttons
 */
/* 2px less than height (is this even needed now?)*/
/**
 * Compact .Form inputs and .Buttons
 */
/**
 * Large .Form inputs and .Buttons
 */
/* TBC*/
/* TBC*/
/* Form
   ============================================================
   Form components are the building blocks of FreeAgent's forms
*/
/**
 * Base styles/resets for the <form> element
 */
.Form {
  border: none;
  display: block;
  text-align: left;
  font-weight: normal;
}

.Form * {
  box-sizing: border-box;
}

/**
 * By default, all fieldsets are reset to an unstyled state.
 *
 * 1. Resolves fieldset's default styling which cause certain elements to push fieldsets wide
 *    More information here: https://stackoverflow.com/questions/17408815
 */
.Form fieldset {
  background: none;
  border: none;
  margin: 0;
  /* 1 */
  min-width: 0;
  padding: 0;
  position: relative;
}

/**
 * Fieldset titles
 * Replaces existing <h2> with more accessible <legend>
 */
.Form-fieldsetLegend {
  float: left;
  font-size: 18px;
  font-weight: bold;
  line-height: 120%;
  margin: 0 0 1em 0;
  padding: 0;
}

/**
 * If fieldsets are required, this basic class applies the default styles.
 */
fieldset.Form-fieldset {
  /* fieldset was needed because of specificity issue*/
  background: #f5f6f7;
  border-radius: 2px;
  padding: 1em;
  margin-bottom: 0.5em;
}

/**
 * Removes the .Form-fieldset background
 * Primary usage is to contain the desktop form submit buttons
 */
fieldset.Form-fieldset--transparent {
  background: none;
}

/**
 * A better control for spacing above a Form's submit Buttons
 * Primarily useful in compact forms with no visible fieldsets
 */
fieldset.Form-submitArea {
  margin-top: 12px;
}

/**
 * A `Form-field` is a container used to wrap any set of label + input(s)
 * They often contain floated elements, so they are float containers by default
 * They add some vertical space between each set of inputs
 */
.Form-field {
  clear: both;
  display: block;
  margin-bottom: 12px;
}

.Form-field:after {
  clear: both;
  content: "";
  display: table;
}

/**
 * Each `Form-field` is divided into two containers
 * The main label for the input/s is placed inside a `Form-labelBlock`
 * Inputs, notes, errors, etc are placed inside a `Form-inputBlock`
 */
.Form-inputBlock {
  display: block;
  position: relative;
  max-width: 40em;
}

/**
 * General form element resets
 */
.Form label,
.Form input:not(.Button),
.Form select,
.FormElement {
  display: inline-block;
  float: none;
  font-size: 14px;
  font-family: inherit;
  max-width: 100%;
  min-width: 0;
  text-align: left;
}

/*.FormElement,
.Form label,*/
.Form input,
.Form select,
.Form .Button {
  margin: 0 0 4px 0;
}

/**
 * Form elements such as inputs and selects get very similar default styles
 * Variables are used for height controls so we can match .Button heights
 */
.FormElement.FormElement-input,
.FormElement-fauxInput,
.FormElement-addon,
.FormElement-label.FormElement-label--addon,
.FormElement-text {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-color: #ffffff;
  border-color: #b2bcc2;
  border-style: solid;
  border-width: 1px;
  border-radius: 4px;
  color: #181a1b;
  outline: none;
  -webkit-transition: background 0.2s, border 0.2s, box-shadow 0.2s;
  transition: background 0.2s, border 0.2s, box-shadow 0.2s;
  padding: 0 8px 0;
  vertical-align: top;
  height: 30px;
  line-height: 28px;
  min-height: 28px;
}

/**
 * Addon-specific styles to create a prefix or suffix
 * Typically placed in front of an input, inside a FormElementGroup
 */
.FormElement-addon,
.FormElement-label.FormElement-label--addon,
.FormElement-text {
  background-color: #f5f6f7;
}

/**
 * Fine-tunes the styles that .FormElement-text gets in the block above so the text isn't contained in any way
 * Example usage: the trailing filename in the file attachment widget
 */
.FormElement-text {
  background-color: transparent !important;
  border-color: transparent;
  padding: 0 4px 0;
}

/**
 * Hover/focus states for inputs
 */
.FormElement-input:hover,
.FormElement-input:focus {
  border-color: #7b8a93;
  z-index: 99;
}

.FormElement-input:focus {
  border-color: #007abf;
  box-shadow: inset 0px 0px 0px 1px #007abf;
  outline: none;
}

.FormElement.FormElement-select {
  background: #f5f6f7;
  background-image: image-url("talaria/components/icons/selectArrow.svg"), -webkit-gradient(linear, left top, left bottom, from(#fff), to(#f5f6f7));
  background-image: image-url("talaria/components/icons/selectArrow.svg"), linear-gradient(#fff, #f5f6f7);
  background-repeat: no-repeat;
  background-position: 100% 50%;
  padding-right: 30px;
}

.FormElement-select[disabled] {
  background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(235, 238, 239, 0.5)), to(rgba(235, 238, 239, 0.5))), image-url("talaria/components/icons/selectArrow.svg");
  background-image: linear-gradient(rgba(235, 238, 239, 0.5), rgba(235, 238, 239, 0.5)), image-url("talaria/components/icons/selectArrow.svg");
}

.FormElement-select:focus {
  border-color: #007abf;
  box-shadow: inset 0px 0px 0px 1px #007abf;
  outline: none;
}

.Form select::-ms-expand,
.FormElement-select::-ms-expand {
  display: none;
}

/**
 * Textarea
 *
 * Padding here is purely to match the spacing of the other single-line inputs,
 * the height of which is defined with a line-height. (Padding isn't explicitly set.)
 * As a result these padding values do not match any scale.
 */
.FormElement-textarea {
  line-height: 18px !important;
  min-height: 100px !important;
  max-width: 100% !important;
  padding-bottom: 5px !important;
  padding-top: 5px !important;
}

/**
 * The 'required field' explanatory note
 */
.requiredNote {
  position: absolute;
  margin: 0;
  top: 0;
  right: 0;
}

/**
 * Positioning when inside a visible fieldset
 */
.Form-fieldset .requiredNote {
  top: 1em;
  right: 1.75em;
}

/**
 * The 'required field' indicator in labels
 */
.requiredField::after {
  content: ' *';
  color: #e72323;
  font-weight: bold;
}

.Form-sideLabels .requiredField::after {
  position: absolute;
  top: -3px;
  right: -6px;
}

/**
 * Controls for purely horizontal forms (e.g. filter bars)
 */
.Form-horizontal input,
.Form-horizontal select {
  margin-bottom: 0;
}

/**
 * A form's primary input labels (placed inside a .Form-labelBlock)
 * In order to accurately align a label's baseline with adjacent
 * inputs/selects/etc we add transparent borders top and bottom
 */
.FormElement-label {
  border-top-width: 1px;
  border-top-style: solid;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  border-color: transparent;
  color: #181a1b;
  height: auto;
  line-height: 18px;
  padding-top: 5px;
  position: relative;
  width: auto;
}

/**
 * To position the primary labels to the left of the inputs,
 * add the .Form-sideLabels class to the <form> element
 *
 * 1. Allows a labelBlock to be empty but still push out the inputBlock
 */
.Form-sideLabels .Form-labelBlock {
  float: left;
  width: 20%;
  padding-right: 12px;
  padding-bottom: 0;
  /* 1 */
  min-height: 10px;
}

.Form-sideLabels .Form-inputBlock {
  float: left;
  width: 80%;
}

/**
 * Special case for the banking view to pull labels out of their parent cell
 */
.Form-sideLabels.Form-sideLabels--pullLeft .Form-labelBlock {
  margin-left: -200px;
  width: 200px;
}

.Form-sideLabels.Form-sideLabels--pullLeft .Form-inputBlock {
  width: 100%;
}

/**
 * Controls for more accurate label alignment
 */
.Form-sideLabels .Form-labelBlock .FormElement-label {
  display: block;
  text-align: right;
}

.Form-fullWidth .Form-labelBlock .FormElement-label {
  padding-top: 0;
}

.FormElement-label.FormElement-label--addon {
  font-size: 14px;
  height: 30px;
  line-height: 28px;
  min-height: 28px;
  padding-top: 0 !important;
}

/**
 * Form element atoms
 */
.FormElement-note {
  clear: both;
  color: #5e6e78;
  display: block;
  font-size: 13px;
  line-height: 18px;
  margin: 0;
  padding: 0;
}

.FormElement-note--error {
  color: #e72323;
}

.FormElement-note--warning {
  color: #eb9100;
}

/**
 * Checkboxes and radio buttons
 *
 * 1. Temporary fixes so checkbox and radio inputs don't break when wrapped in <span class="field_with_errors">
 */
.FormElement-checkbox,
.FormElement-radio {
  clear: both;
  float: left;
  flex-shrink: 0;
  height: 18px;
  width: 18px;
  margin-top: 6px;
  min-height: 18px;
  vertical-align: top;
  overflow: hidden;
  position: relative;
}

.FormElement-checkbox input[type="checkbox"],
.FormElement-radio input[type="radio"] {
  position: relative;
  -webkit-transform: scale(2);
          transform: scale(2);
  opacity: 0;
  z-index: 9;
}

.FormElement-checkbox input[type="checkbox"]:hover + span,
.FormElement-radio input[type="radio"]:hover + span {
  border-color: #7b8a93;
}

.FormElement-checkbox input[type="checkbox"]:focus + span,
.FormElement-radio input[type="radio"]:focus + span {
  border-color: #007abf;
  box-shadow: inset 0px 0px 0px 1px #007abf;
  outline: none;
}

.FormElement-checkbox input[type="checkbox"] + span,
.FormElement-radio input[type="radio"] + span {
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #b2bcc2;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
}

.FormElement-radio input[type="radio"] + span {
  border-radius: 36px;
}

.FormElement-checkbox input[type="checkbox"]:checked + span,
.FormElement-radio input[type="radio"]:checked + span {
  background-image: image-url("talaria/components/icons/tick.svg");
  background-position: 50% 50%;
  background-repeat: no-repeat;
  background-size: 12px;
  border-color: #007abf;
}

.FormElement-radio input[type="radio"]:checked + span {
  background-image: image-url("talaria/components/icons/dot.svg");
}

.FormElement-checkbox input[type="checkbox"][disabled]:checked + span {
  background-image: image-url("talaria/components/icons/tick-grey.svg");
}

.FormElement-radio input[type="radio"][disabled]:checked + span {
  background-image: image-url("talaria/components/icons/dot-grey.svg");
}

.FormElement-checkbox + .FormElement-label,
.FormElement-radio + .FormElement-label {
  float: left;
  padding-left: 8px !important;
  max-width: 90%;
  vertical-align: top;
}

/**
 * Remove checkbox and radio button margins when they're used without labels
 * e.g. for bulk selection on bank transactions
 */
.FormElement-checkbox:only-child,
.FormElement-radio:only-child {
  margin: 0 !important;
}

/**
 * Place two (MAXIMUM!) radio buttons on a single line
 * If labels are longer than two words, radio buttons should not be inlined in this way
 */
.RadioButtons--horizontal {
  display: -webkit-inline-box;
  display: inline-flex;
}

.RadioButtons--horizontal .FormElement-radio + .FormElement-label {
  margin-right: 32px !important;
}

/**
 * Styling for disabled inputs
 */
.FormElement-input[disabled],
.FormElement-select[disabled],
.FormElement-radio[disabled] + label::before,
.FormElement-checkbox input[type="checkbox"]:disabled + span {
  background-color: #ebeeef;
  border-color: #d8dde0;
  box-shadow: none;
  cursor: default;
}

.FormElement-input[disabled],
.FormElement-select[disabled] {
  color: #7b8a93;
  -webkit-opacity: 1;
  -webkit-text-fill-color: #7b8a93;
}

/**
 * The attachment upload button
 */
.FormElement-uploadSelector {
  display: -webkit-inline-box;
  display: inline-flex;
  max-width: 100%;
  position: relative;
}

.FormElement-uploadSelector input {
  opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
}

/**
 * Prevents an attachment filename breaking out of the parent container
 */
.FormElement-uploadSelector .FormElement-text {
  overflow: hidden;
  padding-right: 0 !important;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/**
 * Styling for errors, utilising the existing error handling
 * which wraps errored elements with span.field_with_errors,
 * plus a new error class (.Form-error) for radio buttons, checkboxes, and labels
 */
.FormElement-label.Form-error {
  color: #ce0916 !important;
}

.field_with_errors .FormElement-input,
.FormElement-radio .Form-error + span,
.FormElement-checkbox .Form-error + span {
  background-color: #ffe1dc !important;
  border-color: #c70909 !important;
}

.FormElement-radio input[type="radio"].Form-error:checked + span {
  background-image: image-url("talaria/components/icons/dot-red.svg");
}

.FormElement-checkbox input[type="checkbox"].Form-error:checked + span {
  background-image: image-url("talaria/components/icons/tick-red.svg");
}

.field_with_errors .FormElement-input:focus,
.FormElement-radio input[type="radio"].Form-error:focus + span,
.FormElement-checkbox input[type="checkbox"].Form-error:focus + span {
  box-shadow: inset 0px 0px 0px 1px darkred;
}

/**
 * Make all(?) elements in a .Form full-width with a form-wide .Form-fullWidth class
 *
 * 1. Temporary solution to the extra span that errors insert around a FormElement
 */
.Form-fullWidth .FormElement-input[type="text"],
.Form-fullWidth .FormElement-select,
.Form-fullWidth .FormElementGroup,
.Form-fullWidth .FormElementGroup .field_with_errors {
  width: 100%;
}

.FormElement-notFullWidth {
  width: auto !important;
}

/**
 * Make a single FormElement full-width
 */
.FormElement-fullWidth {
  width: 100%;
}

/**
 * FormElement group
 *
 * 1. Use 'inline-flex' rather than 'flex' so that groups don't default to 100% width
 */
.FormElementGroup {
  /* 1 */
  display: -webkit-inline-box;
  display: inline-flex;
  max-width: 100%;
}

.FormElementGroup .Button:not(:first-child):not(:last-child),
.FormElementGroup .FormElement:not(:first-child):not(:last-child) {
  border-radius: 0 !important;
}

.FormElementGroup .Button:not(:first-child),
.FormElementGroup .FormElement:not(:first-child) {
  margin-left: -1px !important;
}

.FormElementGroup .Button:first-child:not(:only-child),
.FormElementGroup .FormElement:first-child:not(:only-child),
.FormElementGroup div:first-child:not(:only-child) .FormElement,
.FormElementGroup span:first-child:not(:only-child) .FormElement {
  border-bottom-right-radius: 0 !important;
  border-top-right-radius: 0 !important;
}

.FormElementGroup .Button:last-child:not(:only-child),
.FormElementGroup .FormElement:last-child:not(:only-child),
.FormElementGroup div:last-child:not(:only-child) .FormElement,
.FormElementGroup span:last-child:not(:only-child) .FormElement {
  border-bottom-left-radius: 0 !important;
  border-top-left-radius: 0 !important;
}

.FormElementGroup .Button.FormElementGroup-last:not(:first-child):not(:last-child) {
  border-bottom-right-radius: 3px !important;
  border-top-right-radius: 3px !important;
  border-bottom-left-radius: 0 !important;
  border-top-left-radius: 0 !important;
}

.FormElementGroup-grower {
  -webkit-box-flex: 1;
          flex-grow: 1;
}

.FormElementGroup .Button {
  margin-bottom: 4px !important;
}

/**
 * Prevent FormElements and Buttons butting up against each other when inline
 */
.FormElementSpacer .FormElement:not(:first-child),
.FormElementSpaced {
  margin-left: 0.4em !important;
}

/**
 * Set a more sensible width on the custom sales tax rate numerical inputs
 *
 * 1. This is compact, but comfortably leaves room for up to ¤999,999.99 of tax
 */
.FormElement-input--customSalesTax {
  /* 1 */
  width: 104px;
}

/**
 * Large field variant of the form
 *
 * Increases the height and font-size of inputs and labels
 *
 * Used in places like the signup and setup pages where the form is the only
 * major UI element in the view
 */
.Form--largeFields .Form-field {
  margin-bottom: 16px;
}

.Form--largeFields .FormElement.FormElement-label {
  font-size: 16px;
  line-height: 20px;
  padding-top: 9px;
}

.Form--largeFields .Form-labelBlock .FormElement.FormElement-label {
  padding-top: 0;
}

.Form--largeFields .FormElement.FormElement-input,
.Form--largeFields .FormElement.FormElement-fauxInput,
.Form--largeFields .FormElement.FormElement-addon,
.Form--largeFields .FormElement-label.FormElement-label--addon,
.Form--largeFields .FormElement.FormElement-text {
  font-size: 16px;
  height: 40px;
  line-height: 38px;
  min-height: 38px;
  padding-left: 12px;
  padding-right: 12px;
}

.Form--largeFields .Button {
  font-size: 16px !important;
  height: 40px !important;
  line-height: 38px !important;
  min-height: 38px !important;
  padding-left: 12px !important;
  padding-right: 12px !important;
}

.Form--largeFields .FormElement.FormElement-textarea {
  padding-top: 12px !important;
  padding-top: 12px !important;
}

.Form--largeFields .FormElement-note {
  font-size: 14px;
}

.Form--largeFields .FormElement-checkbox,
.Form--largeFields .FormElement-radio {
  margin-top: 10px;
}

.Form--largeFields .Form-inputBlock .FormElement-checkbox:last-of-type,
.Form--largeFields .Form-inputBlock .FormElement-radio:last-of-type {
  margin-bottom: 8px;
}

.Form--largeFields .FormElement.FormElement-select {
  background-size: 22px, cover;
  padding-right: 40px;
}

.Form--largeFields .FormElement-select[disabled] {
  background-size: cover, 22px;
}

/**
 * Styles for a legend used as a 'More Options' open/close toggle
 */
.Form-fieldsetLegend.up,
.Form-fieldsetLegend.down {
  margin-bottom: 2px;
  position: relative;
}

.Form-fieldsetLegend.up + #advanced_options,
.Form-fieldsetLegend.down + #advanced_options {
  padding-top: 16px;
}

.Form-fieldsetLegend.up::after,
.Form-fieldsetLegend.down::after {
  background-image: image-url("talaria/components/icons/chevron.svg");
  background-position: 50% 50%;
  background-repeat: no-repeat;
  background-size: 20px;
  content: "";
  height: 20px;
  width: 20px;
  position: absolute;
  top: 1px;
  right: -26px;
}

.Form-fieldsetLegend.down::after {
  -webkit-transform: rotate(180deg);
          transform: rotate(180deg);
}

/**
 * Notices
 *
 * Notices are used to communicate warning or reminder messages to the user about the state of a view or a particular element
 */
/**
 * Base styles for Notices
 *
 * 1. Default; overridden with other classes
 */
.Notice {
  background-color: #f5f6f7;
  border-left: 2px solid #b4bcc1;
  box-sizing: border-box;
  /* 1 */
  clear: both;
  color: #181a1b;
  display: block;
  font-weight: 500;
  line-height: 140%;
  margin: 0 0 16px;
  padding: 12px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
}

.Notice--page {
  background-color: #f5f6f7;
  border-left: none;
  border-top: 2px solid #b4bcc1;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.2);
  display: block;
  padding: 24px;
  width: 100%;
}

.Notice--warning {
  background-color: #ffeebf;
  border-color: #e37d00;
  color: #b25000;
}

.Notice--info {
  background-color: #e3f3fc;
  border-color: #005896;
  color: #005896;
}

.fe-Button {
  border-radius: 4px;
  background-color: #f5f6f7;
  background-image: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#f5f6f7));
  background-image: linear-gradient(#fff, #f5f6f7);
  border-color: #b2bcc2;
  border-style: solid;
  border-width: 1px;
  color: #007abf;
  fill: #007abf;
  cursor: pointer;
  display: inline-block;
  font-family: "Helvetica Neue", Arial, Helvetica, sans-serif;
  font-size: 14px;
  font-weight: 700;
  height: 30px;
  min-height: 28px;
  line-height: 28px;
  margin: 0;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 12px;
  padding-right: 12px;
  text-align: center;
  text-decoration: none;
  vertical-align: top;
  -webkit-transition: all 0.2s;
  transition: all 0.2s;
  white-space: nowrap;
}

.fe-Button:hover,
.fe-Button:focus {
  background-color: #ebeeef;
  background-image: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#ebeeef));
  background-image: linear-gradient(#fff, #ebeeef);
}

.fe-Button:focus,
.fe-Button:active {
  border-color: #007abf;
  box-shadow: inset 0px 0px 0px 1px #007abf;
  outline: none;
}

.fe-Button:hover {
  border-color: #7b8a93;
}

.fe-Button:active {
  background-color: #F5F6F7;
  background-image: none;
}

.fe-Button-content {
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
  -webkit-box-pack: center;
          justify-content: center;
}

.fe-Button-icon:last-child {
  margin-right: -4px;
}

.fe-Button-icon + :not(.fe-Button-icon) {
  margin-left: 4px;
}

.fe-Button--primary {
  background-color: #4ca130;
  background-image: -webkit-gradient(linear, left top, left bottom, from(#55b335), to(#4ca130));
  background-image: linear-gradient(#55b335, #4ca130);
  border-color: #45912b;
  border-style: solid;
  border-width: 1px;
  color: #fff;
  fill: #fff;
}

.fe-Button--primary:hover,
.fe-Button--primary:active,
.fe-Button--primary:focus {
  background-color: #45912b;
  background-image: -webkit-gradient(linear, left top, left bottom, from(#55b335), to(#45912b));
  background-image: linear-gradient(#55b335, #45912b);
  border-color: #3a8521;
}

.fe-Button--primary:focus {
  box-shadow: inset 0px 0px 0px 1px #3a8521;
}

.fe-Button--primary:active {
  background-color: #45912C;
  background-image: none;
}

.fe-Button--destructive {
  color: #E72323;
  fill: #E72323;
}

.fe-Button--destructive:hover,
.fe-Button--destructive:focus,
.fe-Button--destructive:active {
  background-color: #E72323;
  background-image: none;
  border-color: #B30909;
  border-style: solid;
  border-width: 1px;
  color: #fff;
}

.fe-Button--destructive:focus {
  box-shadow: inset 0px 0px 0px 1px #B30909;
}

.fe-Button--destructive:active {
  background-color: #C70A0A;
  background-image: none;
}

.fe-Button--neutral {
  color: #181A1B;
  fill: #181A1B;
}

.fe-Button--transparent {
  background: none;
  border-color: transparent;
}

.fe-Button--transparent:hover,
.fe-Button--transparent:focus,
.fe-Button--transparent:active {
  background: none;
}

.fe-Button--transparent:active {
  background-color: #F5F6F7;
}

.fe-Button--outline,
.fe-Button--outline:hover,
.fe-Button--outline:active,
.fe-Button--outline:focus {
  background: none;
  background-image: none;
}

.fe-Button--outline:active {
  background-color: #F5F6F7;
}

.fe-Button--block {
  display: block;
  width: 100%;
}

.fe-Button--large {
  font-size: 16px;
  height: 40px;
  min-height: 38px;
  line-height: 38px;
  padding-left: 16px;
  padding-right: 16px;
}

.fe-Button--small {
  font-size: 12px;
  font-weight: normal;
  height: 22px;
  min-height: 20px;
  line-height: 20px;
  padding-left: 6px;
  padding-right: 6px;
}

.fe-Button + .fe-Button {
  margin-left: 4px;
}

.fe-Button:disabled,
.fe-Button:disabled:hover,
.fe-Button:disabled:active,
.fe-Button:disabled:focus {
  background: #ebeeef;
  border-color: #d8dde0;
  box-shadow: none;
  color: #7b8a93;
  cursor: default;
}